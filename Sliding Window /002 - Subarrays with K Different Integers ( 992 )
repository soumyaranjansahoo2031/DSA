// https://leetcode.com/problems/subarrays-with-k-different-integers/description/
// #Hard
// #Two-Pointer  # Sliding Window  # Hashing

//-----------------------------------------------------------------------------
// Brute Force approach--> O( n^2  )
//-----------------------------------------------------------------------------
class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        int n = nums.length;
        int count = 0;
        // System.out.println(n);
        for(int i=0;i<=n-k;i++){
            HashMap<Integer,Integer> map = new HashMap<>();
            for(int j=i;j<n;j++){
                map.put(nums[j],map.getOrDefault(nums[j],0)+1);
                if(map.size()==k) count++;
                else if(map.size() > k) break;
                else{
                    if(j==n-1) return count;
                }
            }
        }
        return count;
    }
}

//-----------------------------------------------------------------------------
// optimised approach 
//-----------------------------------------------------------------------------
class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return atMostK(nums,k)-atMostK(nums,k-1);   
    }
    public int atMostK(int[] nums,int k){
        int n = nums.length;
        int count = 0;

        HashMap<Integer,Integer> map = new HashMap<>();
        
        int i=0;
        for(int j=0;j<n;j++){
            map.put(nums[j],map.getOrDefault(nums[j],0)+1);
            while(map.size()>k){
                map.put(nums[i],map.get(nums[i])-1);
                if(map.get(nums[i])==0){
                    map.remove(nums[i]);
                }
                count += j-i;
                i++;
            }
            if(j==n-1){
                int num = j-i+1;
                count += num*(num+1)/2;
            }
        }

        return count;
    }
}
//===========================================================================

// Example 1:

// Input: nums = [1,2,1,2,3], k = 2
// Output: 7
// Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]

// Example 2:

// Input: nums = [1,2,1,3,4], k = 3
// Output: 3
// Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 
//-----------------------------------------------------------------------------------------------
// Constraints:

// 1 <= nums.length <= 2 * 104
// 1 <= nums[i], k <= nums.length
