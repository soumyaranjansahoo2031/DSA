// https://leetcode.com/problems/alternating-groups-ii/description/
// # Medium
// # Array  # Sliding Window

class Solution {
    int next = 0;
    public int numberOfAlternatingGroups(int[] colors, int k) {
        int n = colors.length;
        int count = 0;
        int ans = 0;

        // Extend the array by appending the first k-1 elements to the end
        int[] extendedColors = new int[n + k - 1];
        System.arraycopy(colors, 0, extendedColors, 0, n);
        System.arraycopy(colors, 0, extendedColors, n, k - 1);

        // System.out.println(Arrays.toString(extendedColors));
        for (int i = 0; i < n+k-2; i++) {
            if(extendedColors[i] != extendedColors[i+1]){
                count++;   
            }
            else{
                if(count > k-2) ans+= count - (k-2);
                count = 0;
            }
        }
        if(count > k-2) ans+= count - (k-2);
        return ans;
    }
}

//==================================================================================

// Example 1:

// Input: colors = [0,1,0,1,0], k = 3
// Output: 3

// Example 2:

// Input: colors = [0,1,0,0,1,0,1], k = 6
// Output: 2

// Example 3:

// Input: colors = [1,1,0,1], k = 4
// Output: 0

// -----------------------------------------------
// Constraints:

// 3 <= colors.length <= 105
// 0 <= colors[i] <= 1
// 3 <= k <= colors.length
