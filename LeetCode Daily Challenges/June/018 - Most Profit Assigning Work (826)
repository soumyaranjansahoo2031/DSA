class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        int n = difficulty.length;
        int m = worker.length;

        // change the profit array  :  no duplicate difficulty value;
        HashMap<Integer,Integer> new_map = new HashMap<>();
        for(int i=0;i<n;i++){
            if(new_map.containsKey(difficulty[i])){
                int value = new_map.get(difficulty[i]);
                if(value > profit[i]) profit[i]=value;
                else new_map.put(difficulty[i],profit[i]);
            }
            else new_map.put(difficulty[i],profit[i]);
        }

        // store the index of duplicate value : will be used in sorting profit array
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            map.put(difficulty[i],i);
        }
        Arrays.sort(difficulty);
        int[] prefix = new int[n];
        int[] m_profit = new int[n];
        for(int i=0;i<n;i++){
            m_profit[i]=profit[map.get(difficulty[i])];
            if(i==0){
                prefix[i]=m_profit[0];
            }
            else{
                prefix[i] = Math.max(m_profit[i],prefix[i-1]);
            }
        }

        //  deal with worker now.
        int ans[] = new int[m];
        for(int i=0;i<m;i++){
            int x = search(difficulty,n,worker[i]);
            ans[i]=( x==-1 ? 0 :prefix[x]);
        }
        return Arrays.stream(ans).sum();
    }
    public int search(int[] difficulty,int n, int val){
        // search : if value exist return the value or return the nearest small value;
        int l = 0;
        int r = n-1;
        if(val < difficulty[l]) return -1;
        else if(val >= difficulty[r]) return r;
        else{
            while(l<r){
                int mid = (l+r+1)/2;
                if(val < difficulty[mid]) r = mid-1;
                else l= mid;
            }
            return l;
        }
    }
}

// public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
//         int n = difficulty.length;
//         int m = worker.length;
//         HashMap<Integer,Integer> new_map = new HashMap<>();
//         for(int i=0;i<n;i++){
//             if(new_map.containsKey(difficulty[i])){
//                 int value = new_map.get(difficulty[i]);
//                 if(value > profit[i]){
//                     profit[i]=value;
//                 }
//             }
//             else new_map.put(difficulty[i],profit[i]);
//         }
//         HashMap<Integer,Integer> map = new HashMap<>();
//         for(int i=0;i<n;i++){
//             // if(map.containsKey(difficulty[i]))
//             map.put(difficulty[i],i);
//         }
//         Arrays.sort(difficulty);
//         int[] prefix = new int[n];
//         int[] m_profit = new int[n];
//         // int[] prefix2 = new int[n];
//         for(int i=0;i<n;i++){
//             m_profit[i]=profit[map.get(difficulty[i])];
//             if(i==0){
//                 prefix[i]=m_profit[0];
//                 // prefix2[i]=difficulty[0];
//             }
//             else{
//                 prefix[i] = Math.max(m_profit[i],prefix[i-1]);
//                 // if(prefix[i]==prefix[i-1]) prefix2[i]=prefix2[i-1];
//                 // else prefix2[i]=difficulty[i];
//             }
//             // System.out.println(Arrays.toString(prefix));
//         }
//         // Arrays.sort(worker);
//         // System.out.println(Arrays.toString(worker));
//         // System.out.println(Arrays.toString(difficulty));
//         // System.out.println(Arrays.toString(m_profit));
//         // System.out.println(Arrays.toString(prefix));
//         int ans[] = new int[m];
        
//         for(int i=0;i<m;i++){
//             int x = search(difficulty,n,worker[i]);
//             ans[i]=( x==-1 ? 0 :prefix[x]);
//         }
//         // System.out.println(Arrays.toString(ans));
//         return Arrays.stream(ans).sum();
//     }


// You have n jobs and m workers. 
// You are given three arrays: difficulty, profit, and worker where:

// difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
// worker[j] is the ability of jth worker 
// (i.e., the jth worker can only complete a job with difficulty at most worker[j]).
// Every worker can be assigned at most one job, 
// but one job can be completed multiple times.

// For example, if three workers attempt the same job that pays $1, 
// then the total profit will be $3. 
// If a worker cannot complete any job, their profit is $0.
// Return the maximum profit we can achieve after assigning the workers to the jobs.
