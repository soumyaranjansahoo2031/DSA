// https://leetcode.com/problems/ipo/description/

class Solution {
    private class Pair{
        int capital;
        int profit;
        Pair(int capital,int profit){
            this.capital = capital;
            this.profit = profit;
        }
    }
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capitals) {

        int n = profits.length;

        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->a.capital-b.capital);
        PriorityQueue<Integer> pq2 = new PriorityQueue<>((a,b)->b-a);

        for(int i=0;i<n;i++){
            pq.add(new Pair(capitals[i],profits[i]));
        }

        int capital = w;
        k= Math.min(k,n);
        while(k>0){
            boolean isDone = false;
            while(!pq.isEmpty()){
                // System.out.println(pq2);
                Pair p = pq.poll();
                int x = p.capital,y = p.profit;
                if(x<=capital) pq2.add(y);
                else{
                    pq.add(new Pair(x,y));
                    if(pq2.isEmpty()) return capital;
                    capital += pq2.poll();
                    k--;isDone=true;break;
                }
            }
            if(isDone) continue;
            while(k-->0){
                capital += pq2.poll();
            }
        }
        return capital;
    }
}


// Suppose LeetCode will start its IPO soon. 
// In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. 
// Since it has limited resources, it can only finish at most k distinct projects before the IPO. 
// Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.

// You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.

// Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

// Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.

// The answer is guaranteed to fit in a 32-bit signed integer.
