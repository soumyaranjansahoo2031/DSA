// https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/description/
// # Medium
// # Graph  # BFS  # DFS  # Topological sort


class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        List<List<Integer>> lili = new ArrayList<>();
        List<TreeSet<Integer>> ans = new ArrayList<>();
        for(int i=0;i<n;i++){
            lili.add(new ArrayList<>());
            ans.add(new TreeSet<>());
        }
        for(int[] edge : edges){
            add(lili,edge[1],edge[0]);
        }
        // printGraph(lili);
        boolean[] visited = new boolean[n];
        for(int i=0;i<n;i++){
            dfs(lili,i,ans,visited);
        }
        List<List<Integer>> result = new ArrayList<>();
        for (TreeSet<Integer> set : ans) {
            result.add(new ArrayList<>(set));
        }
        return result;
    }
    private void dfs(List<List<Integer>> lili,int s,List<TreeSet<Integer>> ans,boolean[] visited){
        visited[s]=true;
        for(int x : lili.get(s)){
            ans.get(s).add(x);
            if(!visited[x]){
                dfs(lili,x,ans,visited);
            }
            for(int ele : ans.get(x)) { ans.get(s).add(ele);}
        }

    }
    private void add(List<List<Integer>> lili,int a,int b){
        lili.get(a).add(b); // directed
    }
    private void printGraph(List<List<Integer>> lili){
        for(int i=0;i<lili.size();i++){
            System.out.print(i+" --> ");
            for(int x:lili.get(i)){
                System.out.print(x+" ");
            }
            System.out.println();
        }
    }
}


=======================================================================================

// Example 1:

// Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]
// Output: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]
// Explanation:
// The above diagram represents the input graph.
// - Nodes 0, 1, and 2 do not have any ancestors.
// - Node 3 has two ancestors 0 and 1.
// - Node 4 has two ancestors 0 and 2.
// - Node 5 has three ancestors 0, 1, and 3.
// - Node 6 has five ancestors 0, 1, 2, 3, and 4.
// - Node 7 has four ancestors 0, 1, 2, and 3.


// Example 2:

// Input: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
// Output: [[],[0],[0,1],[0,1,2],[0,1,2,3]]
// Explanation:
// The above diagram represents the input graph.
// - Node 0 does not have any ancestor.
// - Node 1 has one ancestor 0.
// - Node 2 has two ancestors 0 and 1.
// - Node 3 has three ancestors 0, 1, and 2.
// - Node 4 has four ancestors 0, 1, 2, and 3.
 
--------------------------------------------------------------------------------------------
// Constraints:

// 1 <= n <= 1000
// 0 <= edges.length <= min(2000, n * (n - 1) / 2)
// edges[i].length == 2
// 0 <= fromi, toi <= n - 1
// fromi != toi
// There are no duplicate edges.
// The graph is directed and acyclic.
