

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        int n = nums.length;
        if(n==1) return false;

        int[] prefix = new int[n];
        prefix[0]=nums[0];
        for(int i=1;i<n;i++){
            prefix[i]=prefix[i-1]+nums[i];
        }
        // System.out.println(Arrays.toString(prefix));
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            // System.out.println(map);
            int val = prefix[i]%k;
            if(val==0 && i!=0) return true;
            if(map.containsKey(val)){
                if(map.get(val)+2 <=i) return true;
            }
            else map.put(val,i);
        }
        return false;
    }
}

// Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

// A good subarray is a subarray where:

// its length is at least two, and
// the sum of the elements of the subarray is a multiple of k.
// Note that:

// A subarray is a contiguous part of the array.
// An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
