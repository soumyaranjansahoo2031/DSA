class Solution {
    public String replaceWords(List<String> dictionary, String sentence) {
        HashSet<String> set = new HashSet<>();
        for(String s : dictionary){ 
            set.add(s);
        }
        String[] words = sentence.split(" ");
        StringBuilder sb = new StringBuilder();

        int len = words.length;
        for(int i=0;i<len;i++){
            if(i!=0) sb.append(" ");
            if(match(words[i],set,sb)) continue;
            else{
                sb.append(words[i]);
            }
        }
        return sb.toString();
    }
    private boolean match(String word,HashSet<String> set, StringBuilder sb){
        for(int j=1;j<=word.length();j++){
            if(set.contains(word.substring(0,j))){
                sb.append(word.substring(0,j));
                return true;
            }
        }
        return false;
    }
}

// In English, we have a concept called root, which can be followed by some other word to form another longer word - 
// let's call this word derivative. For example, when the root "help" is followed by the word "ful", we can form a derivative "helpful".

// Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces,
// replace all the derivatives in the sentence with the root forming it. 
// If a derivative can be replaced by more than one root, replace it with the root that has the shortest length.

// Return the sentence after the replacement.
