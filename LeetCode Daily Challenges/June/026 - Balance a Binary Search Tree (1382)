// https://leetcode.com/problems/balance-a-binary-search-tree/description/
// # Medium
// # Tree  # Binary Tree  # Binary Search Tree  # Binary Search

/*
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode balanceBST(TreeNode root) {
        List<Integer> li = new ArrayList<>();
        inorder(root,li);
        // System.out.println(li);
        return constructBST(li,0,li.size()-1);
    }
    private TreeNode constructBST(List<Integer> li,int l,int r){
        if(l>r) return null;
        int mid = (l+r)/2;
        TreeNode node = new TreeNode(li.get(mid));
        node.left = constructBST(li,l,mid-1);
        node.right = constructBST(li,mid+1,r);
        return node;
    }
    private void inorder(TreeNode root,List<Integer> li){
        if(root==null) return ;
        inorder(root.left,li);
        li.add(root.val);
        inorder(root.right,li);
    }
}
