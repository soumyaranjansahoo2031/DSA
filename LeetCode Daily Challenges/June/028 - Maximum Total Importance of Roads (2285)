// https://leetcode.com/problems/maximum-total-importance-of-roads/
// # Medium 
// # Graph # Greedy # PrirityQueue

class Solution {
    public long maximumImportance(int n, int[][] roads) {
        List<List<Integer>> lili = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            lili.add( new ArrayList<>());
        }
        for(int[] road : roads){
            add(road,lili);
        }

        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->b-a);
        for(int i=0;i<n;i++){
            pq.add(lili.get(i).size());
        }
        long ans = 0;
        while(!pq.isEmpty()){
            ans+= (long)pq.poll()*(long)n;
            n--;
        }
        return ans;
    }
    private void add(int[] road,List<List<Integer>> lili){
        int u = road[0],v=road[1];
        lili.get(u).add(v);
        lili.get(v).add(u);
    }
}

=====================================================================================

// Example 1:

// Input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
// Output: 43
// Explanation: The figure above shows the country and the assigned values of [2,4,5,3,1].
// - The road (0,1) has an importance of 2 + 4 = 6.
// - The road (1,2) has an importance of 4 + 5 = 9.
// - The road (2,3) has an importance of 5 + 3 = 8.
// - The road (0,2) has an importance of 2 + 5 = 7.
// - The road (1,3) has an importance of 4 + 3 = 7.
// - The road (2,4) has an importance of 5 + 1 = 6.
// The total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.
// It can be shown that we cannot obtain a greater total importance than 43.


// Example 2:

// Input: n = 5, roads = [[0,3],[2,4],[1,3]]
// Output: 20
// Explanation: The figure above shows the country and the assigned values of [4,3,2,5,1].
// - The road (0,3) has an importance of 4 + 5 = 9.
// - The road (2,4) has an importance of 2 + 1 = 3.
// - The road (1,3) has an importance of 3 + 5 = 8.
// The total importance of all roads is 9 + 3 + 8 = 20.
// It can be shown that we cannot obtain a greater total importance than 20.
