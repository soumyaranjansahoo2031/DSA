// https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/description/
// # Hard
// # Sliding Window  # Queue 

// Naive Method : T.C - O(N*K)
// =========================================================
class Solution {
    public int minKBitFlips(int[] nums, int k) {
        int n = nums.length;
        int ans = 0;
        for(int i=0;i<=n-k;i++){
            if(nums[i]==0){
                ans++;
                flip(nums,i,k);
            }
            // System.out.println(Arrays.toString(nums));
        }
        for(int i=n-k+1;i<n;i++){
            if(nums[i]==0) return -1;
        }
        return ans;
    }
    private void flip(int[] nums,int x,int k){
        for(int i=x;i<x+k;i++){
            nums[i]^=1;
        }
        // return ans+1;
    }
}

// Optimised Method : T.C - O(N)
// ===============================================================
class Solution {
    public int minKBitFlips(int[] nums, int k) {
        int n = nums.length;
        int ans = 0;
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<=n-k;i++){
            if(!q.isEmpty() && i>=q.peek()+k) q.remove();
            if((nums[i]+q.size())%2==0){
                q.add(i);
                ans++;
            }
        }
        for(int i = n-k+1;i<n;i++){
            if(!q.isEmpty() && i>=q.peek()+k) q.remove();
            if((nums[i]+q.size())%2==0){
                return -1;
            }
        }
        return ans;
    }
}


// ==========================================================================

// Example 1:

// Input: nums = [0,1,0], k = 1
// Output: 2
// Explanation: Flip nums[0], then flip nums[2].
// Example 2:

// Input: nums = [1,1,0], k = 2
// Output: -1
// Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].
// Example 3:

// Input: nums = [0,0,0,1,0,1,1,0], k = 3
// Output: 3
// Explanation: 
// Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]
// Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]
// Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]

// Constraints:
//---------------------------
// 1 <= nums.length <= 105
// 1 <= k <= nums.length
