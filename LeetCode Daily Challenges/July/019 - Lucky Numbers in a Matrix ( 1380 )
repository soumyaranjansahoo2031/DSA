// https://leetcode.com/problems/lucky-numbers-in-a-matrix/description/
// #Easy
// #Matrix

class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {

        List<Integer> li = new ArrayList<>();
        
        int n = matrix.length;
        int m = matrix[0].length;

        int row[] = new int[n];
        int col[] = new int[m];

        for(int i=0;i<n;i++){
            int mini = Integer.MAX_VALUE;
            for(int j=0;j<m;j++){
                if(matrix[i][j] < mini){
                    mini = matrix[i][j];
                }
            }
            row[i]=mini;
        }
        for(int j=0;j<m;j++){
            int maxi = Integer.MIN_VALUE;
            for(int i=0;i<n;i++){
                if(matrix[i][j] > maxi){
                    maxi = matrix[i][j];
                }
            }
            col[j]=maxi;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j] == row[i] && matrix[i][j] == col[j]) li.add(matrix[i][j]); 
            }
        }
        return li;
    }
}
//==========================================================================================================

// Example 1:

// Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
// Output: [15]
// Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
// Example 2:

// Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
// Output: [12]
// Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
// Example 3:

// Input: matrix = [[7,8],[1,2]]
// Output: [7]
// Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.
 

// Constraints:

// m == mat.length
// n == mat[i].length
// 1 <= n, m <= 50
// 1 <= matrix[i][j] <= 105.
// All elements in the matrix are distinct.
