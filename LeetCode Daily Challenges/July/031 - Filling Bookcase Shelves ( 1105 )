// https://leetcode.com/problems/filling-bookcase-shelves/description/
// # Medium
// 
//====================================================================
// Recursive Approach
//====================================================================
class Solution {
    public int minHeightShelves(int[][] books, int mw) {
        int n = books.length;
        return fun(books,mw,n-1,0,0);
    }
    int fun(int[][] books,int mw,int i,int sw,int height){
        if(i==-1) return height;
        if(sw == 0){
            sw = books[i][0];
            height = books[i][1];
            return fun(books,mw,i-1,sw,height);
        }
        else{
            if(sw + books[i][0] > mw){
                return height + fun(books,mw,i,0,0);
            }
            else{
                if(books[i][1] < height){
                    return fun(books,mw,i-1,sw+books[i][0],height);
                }
                else{
                    int x = fun(books,mw,i-1,sw+books[i][0],books[i][1]);
                    int y = height + fun(books,mw,i,0,0);
                    return Math.min(x,y);
                }
            }
        }
    }
}
//=======================================================================
// Memorization Approach
//====================================================================
class Solution {
    public int minHeightShelves(int[][] books, int mw) {
        int n = books.length;
        Map<String, Integer> memo = new HashMap<>();
        return fun(books,mw,n-1,mw,0,memo);
    }
    int fun(int[][] books,int mw,int i,int rw,int maxH,Map<String, Integer> memo){
        if(i==-1) return maxH;

        String key = i + "," + rw + "," + maxH;
        if (memo.containsKey(key)) return memo.get(key);

        int w = books[i][0];
        int h = books[i][1];

        int keep=Integer.MAX_VALUE,skip=Integer.MAX_VALUE;
        if(w <= rw){
            //keep
            keep = fun(books,mw,i-1,rw-w,Math.max(maxH,h),memo);
        }
        //skip
        skip = maxH + fun(books,mw,i-1,mw-w,h,memo);

        int result = Math.min(keep, skip);
        memo.put(key, result);
        return result;
    }
}
//=======================================================================

// Example 1:

// Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4
// Output: 6
// Explanation:
// The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.
// Notice that book number 2 does not have to be on the first shelf.


// Example 2:

// Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6
// Output: 4

//--------------------------------------------------------------------------

// Constraints:

// 1 <= books.length <= 1000
// 1 <= thicknessi <= shelfWidth <= 1000
// 1 <= heighti <= 1000
