// https://leetcode.com/problems/number-of-good-leaf-nodes-pairs/description/
// # Medium
// # Binary Tree  # DFS

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countPairs(TreeNode root, int distance) {
        List<List<TreeNode>> lili = new ArrayList<>();
        List<TreeNode> li = new ArrayList<>();

        fun(root,lili,li);

        int n = lili.size();
        int dist = 0,count=0;
        for(int i=0;i<n-1;i++){
            for(int j = i+1;j<n;j++){
                int joint = fun2(lili,i,j);
                // System.out.println(joint);
                dist = lili.get(i).size()+lili.get(j).size()-2*joint;
                if(dist <= distance) count++;
            }
        }
        return count;
    }
    public int fun2(List<List<TreeNode>> lili,int i,int j){
        int count = 0;
        for(int index=0;index<lili.get(i).size() && index<lili.get(j).size();index++){
            if(lili.get(i).get(index)==lili.get(j).get(index)) count++;
            else return count;
        }
        return 0;
    }
    public void fun(TreeNode root,List<List<TreeNode>> lili,List<TreeNode> li){
        li.add(root);
        if(root.left == null && root.right == null){
            lili.add(new ArrayList<>(li));
        }
        else if(root.right == null ){
            fun(root.left,lili,li);
        }
        else if(root.left == null){
            fun(root.right,lili,li);
        }
        else{
            fun(root.left,lili,li);
            fun(root.right,lili,li);
        }
        li.remove(li.size()-1);
        return ;
    }
    void print(List<TreeNode> li){
        for(int i=0;i<li.size();i++){
            System.out.print(li.get(i).val+"->");
        }
        System.out.println();
    }
}
//================================================================================================================================================================
//Example 1:

//Input: root = [1,2,3,null,4], distance = 3
//Output: 1
//Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.

//Example 2:

//Input: root = [1,2,3,4,5,6,7], distance = 3
//Output: 2
//Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.

//Example 3:

//Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
//Output: 1
//Explanation: The only good pair is [2,5].
 
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Constraints:

//The number of nodes in the tree is in the range [1, 210].
//1 <= Node.val <= 100
//1 <= distance <= 10
