// https://leetcode.com/problems/merge-nodes-in-between-zeros/
// # Medium
// # LinkedList

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeNodes(ListNode head) {
        ListNode prev = head;
        ListNode curr = head.next;

        while(curr != null){
            int data = 0;
            while(curr.val != 0){
                data += curr.val;
                curr = curr.next;
            }
            prev.next = new ListNode(data);
            prev = prev.next;
            curr = curr.next;
        }
        prev.next = null;
        return head.next;
    }
}
//=============================================================================================================
// You are given the head of a linked list, 
// which contains a series of integers separated by 0's. 
// The beginning and end of the linked list will have Node.val == 0.

// For every two consecutive 0's, 
// merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. 
// The modified list should not contain any 0's.

// Return the head of the modified linked list.
