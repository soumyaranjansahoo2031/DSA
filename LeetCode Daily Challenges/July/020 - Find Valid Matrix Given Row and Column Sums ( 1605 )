// https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/description/?envType=daily-question&envId=2024-07-20
// #Medium
// #Array #Matrix  #Greedy



class Solution {
    public int[][] restoreMatrix(int[] rowSum, int[] colSum) {
        
        int n = rowSum.length;
        int m = colSum.length;
        int[][] arr = new int[n][m];
        System.out.println(n+" "+m);

        int j = 0;
        while(j<m){
            long sum = 0;
            for(int i=0;i<n;i++){
                arr[i][j] = rowSum[i];
                rowSum[i] = 0;
                sum += (long)arr[i][j];
            }
            // System.out.println(Arrays.deepToString(arr));
            long extra = sum - (long)colSum[j];
            while(extra > 0){
                for(int i=0;i<n;i++){
                    if(extra > arr[i][j]){
                        rowSum[i] = arr[i][j];
                        arr[i][j]=0;
                        extra -= (long)rowSum[i];
                    }
                    else{
                        rowSum[i]=(int)extra;
                        arr[i][j] -= (int)extra;
                        extra = 0;
                    }
                }
            }
            j++;
        }
        return arr;
    }
}
 

// =============================================================================================
// Example 1:

// Input: rowSum = [3,8], colSum = [4,7]
// Output: [[3,0],
//          [1,7]]
// Explanation: 
// 0th row: 3 + 0 = 3 == rowSum[0]
// 1st row: 1 + 7 = 8 == rowSum[1]
// 0th column: 3 + 1 = 4 == colSum[0]
// 1st column: 0 + 7 = 7 == colSum[1]
// The row and column sums match, and all matrix elements are non-negative.
// Another possible matrix is: [[1,2],
//                              [3,5]]


// Example 2:

// Input: rowSum = [5,7,10], colSum = [8,6,8]
// Output: [[0,5,0],
//          [6,1,0],
//          [2,0,8]]
 
//---------------------------------------------------------------------------------------
// Constraints:

// 1 <= rowSum.length, colSum.length <= 500
// 0 <= rowSum[i], colSum[i] <= 108
// sum(rowSum) == sum(colSum)
