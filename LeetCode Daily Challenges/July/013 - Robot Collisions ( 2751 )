// https://leetcode.com/problems/robot-collisions/description/
// # Medium
// #Array #Stack #Sorting #Simulation

class Solution {
    class Pair{
        int index;
        int position;
        int health;
        char ch;
        Pair(int i,int pos,int h,char c){
            this.index = i;
            this.position = pos;
            this.health = h;
            this.ch = c;
        }
    }
    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        Map<Integer,Pair> map = new HashMap<>();

        int n = positions.length;

        for(int i=0;i<n;i++){
            map.put(positions[i],new Pair(i,positions[i],healths[i],directions.charAt(i)));
        }

        Arrays.sort(positions);
        char[] arr = new char[n];
        for(int i=0;i<n;i++){
            healths[i]=map.get(positions[i]).health;
            arr[i]=map.get(positions[i]).ch;
        }

        Stack<Pair> st = new Stack<>();
        for(int i=0;i<n;i++){
            int index = map.get(positions[i]).index;
            if(st.isEmpty() || arr[i]=='R') st.push(new Pair(index,positions[i],healths[i],arr[i]));
            else if(st.peek().ch=='L'){
                st.push(new Pair(index,positions[i],healths[i],arr[i]));
            }
            else{
                boolean flag = true;
                while(!st.isEmpty() && st.peek().ch=='R'){
                    Pair p = st.peek();
                    if(p.health < healths[i]){
                        st.pop();
                        // st.push(new Pair(positions[i],healths[i]-1,arr[i]));
                        healths[i]--;
                    }
                    else if(p.health > healths[i]){
                        st.pop();
                        st.push(new Pair(p.index,p.position,p.health-1,p.ch));
                        flag = false;break;
                    }
                    else{
                        st.pop();
                        flag=false;break;
                    }
                }
                if(flag) st.push(new Pair(index,positions[i],healths[i],arr[i]));
            }
        }
        List<Pair> li = new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        while(!st.isEmpty()){
            li.add(st.pop());
        }
        // print(li);
        Collections.sort(li,(a,b)->{
            return a.index - b.index;
        });
        for(Pair p : li){
            res.add(p.health);
        }
        return res;
    }
    // void print(List<Pair> li){
    //     for(Pair p : li){
    //         System.out.println(p.index+" "+p.health+" "+p.ch);
    //     }
    // }
}

//=======================================================================================================================
// Example 1:

// Input: positions = [5,4,3,2,1], healths = [2,17,9,15,10], directions = "RRRRR"
// Output: [2,17,9,15,10]
// Explanation: No collision occurs in this example, since all robots are moving in the same direction.
// So, the health of the robots in order from the first robot is returned, [2, 17, 9, 15, 10].


// Example 2:

// Input: positions = [3,5,2,6], healths = [10,10,15,12], directions = "RLRL"
// Output: [14]
// Explanation: There are 2 collisions in this example. Firstly, robot 1 and robot 2 will collide, 
// and since both have the same health, they will be removed from the line. Next, robot 3 and robot 4 will collide and 
// since robot 4's health is smaller, it gets removed, and robot 3's health becomes 15 - 1 = 14. Only robot 3 remains, 
// so we return [14].


// Example 3:

// Input: positions = [1,2,5,6], healths = [10,10,11,11], directions = "RLRL"
// Output: []
// Explanation: Robot 1 and robot 2 will collide and since both have the same health, 
// they are both removed. Robot 3 and 4 will collide and since both have the same health, they are both removed. 
// So, we return an empty array, [].
 
/------------------------------------------------------------------------------------------------------------------------------------------------
// Constraints:

// 1 <= positions.length == healths.length == directions.length == n <= 105
// 1 <= positions[i], healths[i] <= 109
// directions[i] == 'L' or directions[i] == 'R'
// All values in positions are distinct
