// https://leetcode.com/problems/find-k-th-smallest-pair-distance/description/
// Medium
// 
//==============================================================================
// Brute Force Approach
//==============================================================================
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        // Arrays.sort(nums);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->b-a);
        for(int i=0;i<nums.length-1;i++){
            for(int j =i+1;j<nums.length;j++){
                pq.add(Math.abs(nums[i]-nums[j]));
                if(pq.size()>k) pq.poll();
            }
        }
        return pq.poll();
    }
}
//==============================================================================
// Optimised Approach
//===============================================================================
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int n = nums.length;
        int l = 0;
        int r = nums[n-1];
        int result = 0;
        while(l<=r){
            int mid = (l+r)/2;
            if(countPairs(nums,mid) < k ){
                l = mid +1;
            }
            else{
                result = mid;
                r = mid - 1;
            }
        }
        return result;
    }
    public int countPairs(int[] nums,int mid){
        int count = 0;
        for(int i=0;i<nums.length-1;i++){
            for(int j =i+1;j<nums.length;j++){
                if(nums[j]-nums[i] <= mid) count++;
                else break;
                // System.out.println(mid +" "+count);
            }
        }
        return count;
    }
}
//=======================================================================

// Example 1:

// Input: nums = [1,3,1], k = 1
// Output: 0
// Explanation: Here are all the pairs:
// (1,3) -> 2
// (1,1) -> 0
// (3,1) -> 2
// Then the 1st smallest distance pair is (1,1), and its distance is 0.
// Example 2:

// Input: nums = [1,1,1], k = 2
// Output: 0
// Example 3:

// Input: nums = [1,6,1], k = 3
// Output: 5
 

// Constraints:

// n == nums.length
// 2 <= n <= 104
// 0 <= nums[i] <= 106
// 1 <= k <= n * (n - 1) / 2
