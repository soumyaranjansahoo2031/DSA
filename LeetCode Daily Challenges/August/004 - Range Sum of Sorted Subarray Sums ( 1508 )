// https://leetcode.com/problems/range-sum-of-sorted-subarray-sums/?envType=daily-question&envId=2024-08-04
// Medium
// # Array # Two pointer

//==========================================================================================

class Solution {
    int mod = 1000000007;
    public int rangeSum(int[] nums, int n, int left, int right) {
        List<Long> subarraySums = new ArrayList<>();

        // Generate all subarray sums
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = i; j < n; j++) {
                sum = (sum+(long)nums[j]%mod)%mod;
                subarraySums.add(sum);
            }
        }

        // Sort the list of subarray sums
        Collections.sort(subarraySums);

        // Calculate the sum of the range
        long ans = 0;
        for (int i = left - 1; i < right; i++) {
            ans = (ans+subarraySums.get(i)%mod)%mod;
        }

        // Return the sum as an integer
        return (int) ans;
    }
}

//=========================================================================================

// Example 1:

// Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
// Output: 13 
// Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. 
// After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. 
// The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 


// Example 2:

// Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
// Output: 6
// Explanation: The given array is the same as example 1. 
// We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. 
// The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.


// Example 3:

// Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
// Output: 50
 
//---------------------------------------------------------------------------------------------
// Constraints:

// n == nums.length
// 1 <= nums.length <= 1000
// 1 <= nums[i] <= 100
// 1 <= left <= right <= n * (n + 1) / 2
