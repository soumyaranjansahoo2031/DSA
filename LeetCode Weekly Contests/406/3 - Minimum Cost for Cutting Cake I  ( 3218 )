// https://leetcode.com/problems/minimum-cost-for-cutting-cake-i/description/
// #Medium
//

class Solution {
    public int minimumCost(int m, int n, int[] hCut, int[] vCut) {
        PriorityQueue<Integer> h_cut = new PriorityQueue<>((a,b)->b-a);
        PriorityQueue<Integer> v_cut = new PriorityQueue<>((a,b)->b-a);
        
        for(int x: hCut ){
            h_cut.add(x);
        }
        for(int y : vCut){
            v_cut.add(y);
        }
    
        int rows = 1,cols =1;
        int ans = 0;
        
        while(!h_cut.isEmpty() && !v_cut.isEmpty()){
            if(h_cut.peek() >= v_cut.peek()){
                ans += h_cut.poll()*cols;
                rows++;
            }
            else if(h_cut.peek() < v_cut.peek()){
                ans += v_cut.poll()*rows;
                cols++;
            }
        }
        while(!h_cut.isEmpty()){
            ans += h_cut.poll()*cols;
            // rows++;
        }
        while(!v_cut.isEmpty()){
            ans += v_cut.poll()*rows;
            // cols++;
        }
        return ans;
    }
}

// ============================================================================================

// Example 1:

// Input: m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]
// Output: 13

// Explanation:

// Perform a cut on the vertical line 0 with cost 5, current total cost is 5.
// Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1.
// Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1.
// Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3.
// Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3.
// The total cost is 5 + 1 + 1 + 3 + 3 = 13.

// Example 2:

// Input: m = 2, n = 2, horizontalCut = [7], verticalCut = [4]
// Output: 15

// Explanation:

// Perform a cut on the horizontal line 0 with cost 7.
// Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4.
// Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4.
// The total cost is 7 + 4 + 4 = 15.

//------------------------------------------------------------------------------------
// Constraints:

// 1 <= m, n <= 20
// horizontalCut.length == m - 1
// verticalCut.length == n - 1
// 1 <= horizontalCut[i], verticalCut[i] <= 103
