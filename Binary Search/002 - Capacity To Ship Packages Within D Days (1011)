// https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/description/
// # Medium
// # Binary Search


class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int sum =0,maxi=Integer.MIN_VALUE;
        for(int i=0;i<weights.length;i++){
            sum+=weights[i];
            maxi = Math.max(maxi,weights[i]);
        }
        int l = maxi;
        int r = sum;
        while(l<r){
            int mid = l+(r-l)/2;
            if(fun(mid,weights)<=days) r=mid;
            else l = mid+1;
        }
        return r;
    }
    private int fun(int capacity,int[] weights){
        int days = 1;
        int weight = 0;
        for(int i=0;i<weights.length;i++){
            if(weight+weights[i] > capacity){
                weight = weights[i];
                days++;
            }
            else weight+=weights[i];
        }
        return days;
    }
}

//===================================================================================================

// A conveyor belt has packages that must be shipped from one port to another within days days.

// The ith package on the conveyor belt has a weight of weights[i].
// Each day, we load the ship with packages on the conveyor belt (in the order given by weights).
// We may not load more weight than the maximum weight capacity of the ship.

// Return the least weight capacity of the ship 
// that will result in all the packages on the conveyor belt being shipped within days days.

//===================================================================================================

// Example 1:

// Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
// Output: 15
// Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
// 1st day: 1, 2, 3, 4, 5
// 2nd day: 6, 7
// 3rd day: 8
// 4th day: 9
// 5th day: 10

// Note that the cargo must be shipped in the order given, 
// so using a ship of capacity 14 and splitting the packages into parts 
// like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.


