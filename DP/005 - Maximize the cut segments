// https://www.geeksforgeeks.org/problems/cutted-segments1642/1
// # Medium
// #DP


// Recursive Approach
// ---------------------------------------------------------
class Solution
{
    //Function to find the maximum number of cuts.
    public int maximizeCuts(int n, int x, int y, int z)
    {
       //Your code here
       return fun(n,x,y,z);
       
    }
    private int fun(int n,int x,int y,int z){
        if(n<0) return -1;
        if(n==0) return 0;
        
        int op1 = fun(n-x,x,y,z);
        int op2 = fun(n-y,x,y,z);
        int op3 = fun(n-z,x,y,z);
        
        int res = Math.max(op1, Math.max(op2,op3));
        
        if(res==-1) return res;
        else return 1+res;
        
    }
}
//------------------------------------------------------------

// Memorization Approach
// -----------------------------------------------------------
class Solution
{
    //Function to find the maximum number of cuts.
    public int maximizeCuts(int n, int x, int y, int z)
    {
       //Your code here
       int memo[] = new int[n+1];
       Arrays.fill(memo,-2);
       int ans = fun(n,x,y,z,memo);
       return ans == -1 ? 0 : ans;
       
    }
    private int fun(int n,int x,int y,int z,int[] memo){
        if(n<0) return -1;
        if(n==0) return 0;

        if(memo[n]!=-2) return memo[n];
        
        int op1 = fun(n-x,x,y,z,memo);
        int op2 = fun(n-y,x,y,z,memo);
        int op3 = fun(n-z,x,y,z,memo);
        
        int res = Math.max(op1, Math.max(op2,op3));
        
        if(res==-1) return memo[n]=res;
        else return memo[n]=1+res;
        
    }
}
// -------------------------------------------------------------------

// Tabulation Approach 
// --------------------------------------------------------------------
class Solution
{
    //Function to find the maximum number of cuts.
    public int maximizeCuts(int n, int a, int b, int c)
    {
       //Your code here
        int dp[] = new int[n+1];
        for(int i=1;i<=n;i++){
            dp[i]=-1;
            if(i >= a) dp[i]=Math.max(dp[i],dp[i-a]);
            if(i >= b) dp[i]=Math.max(dp[i],dp[i-b]);
            if(i >= c) dp[i]=Math.max(dp[i],dp[i-c]);
            
            if(dp[i]!=-1) dp[i]++;
        }
        return dp[n]==-1 ? 0 : dp[n];
       
    }
}
