// https://leetcode.com/problems/edit-distance/description/
// #Medium
// #DP 

// Recursive Approach
// ------------------------------------------------------
class Solution {
    public int minDistance(String word1, String word2) {
        return ed(word1,word2,word1.length(),word2.length());
    }
    private int ed(String s1,String s2,int m,int n){
        if(m==0 && n==0) return 0;
        if(m==0 || n==0) return Math.abs(m-n);
        if(s1.charAt(m-1)==s2.charAt(n-1)){
            return ed(s1,s2,m-1,n-1);
        }
        int op1 = 1 + ed(s1,s2,m-1,n); // delete
        int op2 = 1 + ed(s1,s2,m,n-1); // insert
        int op3 = 1 + ed(s1,s2,m-1,n-1); // replace

        return Math.min(op1,Math.min(op2,op3));
    }
}

// Memorization Approach
// ------------------------------------------------------
class Solution {
    public int minDistance(String word1, String word2) {
        int[][] memo = new int[word1.length()+1][word2.length()+1];
        for(int[] row : memo) {Arrays.fill(row,-1);}
        return ed(word1,word2,word1.length(),word2.length(),memo);
    }
    private int ed(String s1,String s2,int m,int n,int[][] memo){

        if(memo[m][n]!=-1) return memo[m][n];

        if(m==0 && n==0){
            memo[m][n]=0;
            return memo[m][n];
            // return 0;
        }
        if(m==0 || n==0){
            memo[m][n]=Math.abs(m-n);
            return memo[m][n];
            // return Math.abs(m-n);
        }
        if(s1.charAt(m-1)==s2.charAt(n-1)){
            // return ed(s1,s2,m-1,n-1);
            memo[m][n]= ed(s1,s2,m-1,n-1,memo);
            return memo[m][n];
        }
        int op1 = 1 + ed(s1,s2,m-1,n,memo); // delete
        int op2 = 1 + ed(s1,s2,m,n-1,memo); // insert
        int op3 = 1 + ed(s1,s2,m-1,n-1,memo); // replace

        // return Math.min(op1,Math.min(op2,op3));
        memo[m][n]=Math.min(op1,Math.min(op2,op3));
        return memo[m][n];
    }
}

// Tabulation Approach
// ----------------------------------------------------------------
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length(), n=word2.length();
        int[][] dp = new int[m+1][n+1];
        // for(int[] row : memo) {Arrays.fill(row,-1);}
        // return ed(word1,word2,word1.length(),word2.length(),memo);
        for(int i=0;i<=m;i++){
            dp[i][0]=i;
        }
        for(int j=0;j<=n;j++){
            dp[0][j]=j;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1];
                }
                else{
                    dp[i][j]=1+Math.min(dp[i-1][j-1],
                            Math.min(dp[i][j-1],dp[i-1][j]));
                }
            }
        }
        // System.out.println(Arrays.deepToString(dp));
        return dp[m][n];
    }
}


// Given two strings word1 and word2, 
// return the minimum number of operations required to convert word1 to word2.

// You have the following three operations permitted on a word:

// Insert a character
// Delete a character
// Replace a character
