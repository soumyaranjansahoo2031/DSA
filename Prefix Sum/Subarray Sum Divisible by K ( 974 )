#https://leetcode.com/problems/subarray-sums-divisible-by-k/description/

## Medium
### Prefix Sum ### HashMap

----------------------------------------------------------------------
Brute Force Approach
----------------------------------------------------------------------
class Solution {
    public int subarraysDivByK(int[] arr, int k) {
        int n = arr.length;
        int count = 0;

        for(int i = 0;i<n;i++){
            int sum = 0;
            for(int j = i;j<n;j++){
                sum += arr[j];
                if(sum % k == 0) count++;
            }
        }
        return count;
    }
}
----------------------------------------------------------------------
Optimised Approach
----------------------------------------------------------------------
class Solution {
    public int subarraysDivByK(int[] arr, int k) {
        int n = arr.length;

        int[] prefix = new int[n];
        prefix[0]=arr[0];
        for(int i=1;i<n;i++){
            prefix[i]=prefix[i-1]+arr[i];
        }

        int count = 0;
        
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);

        for(int i=0;i<n;i++){
            int req = ((prefix[i]%k)+k)%k;
            if(map.containsKey(req)){
                count += map.get(req);
            }
            map.put(req,map.getOrDefault(req,0)+1);
        }
        
        return count;
    }
}
