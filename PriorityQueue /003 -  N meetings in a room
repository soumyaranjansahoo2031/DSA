// https://www.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1
// Easy
// # Greedy  # Priority Queue

//=============================================================================
class Solution {
    // Function to find the maximum number of meetings that can
    // be performed in a meeting room.
    public int maxMeetings(int n, int start[], int end[]) {
        // add your code here
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[1]-b[1]);
        
        for(int i=0;i<n;i++){
            pq.add( new int[]{start[i],end[i]} );
        }
        int started = -1;
        int ended = -1;
        int count =0;
        while( !pq.isEmpty() ){
            int[] arr = pq.peek();
            if(arr[0] > ended){
                started = arr[0];
                ended = arr[1];
                count++;
            }
            pq.poll();
        }
        return count;
    }
}
//=============================================================================

// Examples :

// Input: n = 6, start[] = [1, 3, 0, 5, 8, 5], end[] =  [2, 4, 6, 7, 9, 9]
// Output: 4
// Explanation: Maximum four meetings can be held with given start and end timings. The meetings are - (1, 2), (3, 4), (5,7) and (8,9)

// Input: n = 3, start[] = [10, 12, 20], end[] = [20, 25, 30]
// Output: 1
// Explanation: Only one meetings can be held with given start and end timings.

// Expected Time Complexity: O(n*logn)
// Expected Auxilliary Space: O(n)

// Constraints:
// 1 ≤ n ≤ 105
// 0 ≤ start[i] < end[i] ≤ 106
