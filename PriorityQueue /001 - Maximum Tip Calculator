// https://www.geeksforgeeks.org/problems/maximum-tip-calculator2631/1
#GFG  #PriorityQueue

class Solution {
    private static class Pair{
        int index;
        int diff;
        Pair(int index,int diff){
            this.index = index;
            this.diff = diff;
        }
    }
    public static long maxTip(int n, int x, int y, int[] arr, int[] brr) {
        // code here
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->a.diff-b.diff);
        for(int i=0;i<n;i++){
            pq.add(new Pair(i,arr[i]-brr[i]));
        }
        long total = 0;
        int i_min = Math.min(y,n-x);
        for(int i=0;i<n;i++){
            Pair p = pq.poll();
            int index = p.index;
            int diff = p.diff;
            if(i<i_min){
                total += (long)brr[index];
            }
            else if(i<y && diff < 0){
                total += (long)brr[index];
            }
            else total += (long)arr[index];
        }
        return total;
        
    }
}


// In a restaurant, two waiters, A and B, receive n orders per day, 
// earning tips as per arrays arr[i] and brr[i] respectively. 
// If A takes the ith order, the tip is arr[i] rupees; 
// if B takes it, the tip is brr[i] rupees.

// To maximize total tips, they must distribute the orders such that:

// A can handle at most x orders
// B can handle at most y orders
// Given that x + y â‰¥ n, all orders can be managed by either A or B. 

// Return the maximum possible total tip after processing all the orders.
