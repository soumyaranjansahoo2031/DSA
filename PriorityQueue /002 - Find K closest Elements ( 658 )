// https://leetcode.com/problems/find-k-closest-elements/description/
// # Medium
// # Array # Two Pointers # Binary Search # Sliding Window # Sorting # Heap (Priority Queue)


// -----------------------------------------------------------------------------------------------------
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> {
                int diff1=Math.abs(a-x);
                int diff2=Math.abs(b-x);
                if(diff1==diff2) return a-b;
                else return diff1-diff2;
        });
        for(int i =0 ;i<arr.length;i++){
            pq.add(arr[i]);
        }
        List<Integer> li = new ArrayList<>(k);
        while(k-- > 0){
            li.add(pq.poll());
        }
        Collections.sort(li);
        return li;
    }
}
// ------------------------------------------------------------------------------------------------------
//class Solution {
//     public int findNearestPos(int[] arr, int k, int x){
//         int n= arr.length;

//         if(x<=arr[0]) return 0;
//         if(x>=arr[n-1]) return n-1;

//         int l=0;
//         int r=n-1;
//         int m=(l+r)/2;

//         while(l<r-1){
//             if(arr[m] > x) r=m;
//             else if(arr[m] < x) l=m;
//             else return m;
//             m=(l+r)/2;
//         }
//         int ans =(Math.abs(x-arr[l])<=Math.abs(arr[r]-x))?l:r;
//         return ans;
//     }
//     public int findStartPos(int[] arr, int k, int x){
//         int n=arr.length;
//         if(x<=arr[0]) return 0;
//         if(x>=arr[n-1]) return n-k;
        
//         int m=findNearestPos(arr,k,x);
//         int l=m;
//         int r=m+1;
//         int req=k;
//         int ans=m;
//         while((req--)!=0){
//             if(l==-1) return 0;
//             if(r==n) return n-k;

//             if(Math.abs(x-arr[l])<=Math.abs(arr[r]-x)){
//                 ans =l;
//                 l--;
//             }
//             else r++;
//         }
//         return ans;
//     }

//     public List<Integer> findClosestElements(int[] arr, int k, int x) {
//         int l=findStartPos(arr, k,x);

//         ArrayList<Integer> arr2=new ArrayList<Integer>(k);
//         for(int i=0;i<k;i++){
//             arr2.add(arr[i+l]);
//         }

//         return arr2;
//     }
// }

// =================================================================================================

// Given a sorted integer array arr, two integers k and x, 
// return the k closest integers to x in the array. 
// The result should also be sorted in ascending order.

// An integer a is closer to x than an integer b if:

// |a - x| < |b - x|, or
// |a - x| == |b - x| and a < b
 

// Example 1:

// Input: arr = [1,2,3,4,5], k = 4, x = 3
// Output: [1,2,3,4]


// Example 2:

// Input: arr = [1,2,3,4,5], k = 4, x = -1
// Output: [1,2,3,4]
 

// Constraints:

// 1 <= k <= arr.length
// 1 <= arr.length <= 104
// arr is sorted in ascending order.
// -104 <= arr[i], x <= 104
