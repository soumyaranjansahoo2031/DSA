package com.practice2;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class BFS {
	static void addEdge(ArrayList<ArrayList<Integer>> adj,int u,int v) {
		adj.get(u).add(v);
		adj.get(v).add(u);
	}
	public static void main(String[] args) {
		int v=4;
		ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>> (v);
		for(int i =0;i<v;i++){
			adj.add(new ArrayList<Integer>());
		}
		addEdge(adj,0,1);
		addEdge(adj,0,2);
		addEdge(adj,1,2);
		addEdge(adj,2,3);
		printGraph(adj);
		// bfs(adj,v,0);
		bfs_dis(adj,v);
	}
	private static void bfs_dis(ArrayList<ArrayList<Integer>> adj , int v){
		boolean visited[v];
		for(int i=0;i<v;i++){
			if(visited[i]==false) bfs2(adj,i,visited);
		}
	}
	private static void bfs(ArrayList<ArrayList<Integer>> adj, int v, int s) {
		boolean visited[] = new boolean[v+1];
		Queue<Integer> q = new LinkedList<>();
		q.add(s);
		visited[s]=true;
		while(!q.isEmpty()) {
			int ele = q.poll();
			System.out.print(ele+" ");
			for(int x : adj.get(ele)) {
				if(visited[x]!=true) {
					q.add(x);
					visited[x]=true;
				}
			}
		}
	}
	private static void bfs2(ArrayList<ArrayList<Integer>> adj, int s,boolean visited[]) {
		Queue<Integer> q = new LinkedList<>();
		q.add(s);
		visited[s]=true;
		while(!q.isEmpty()) {
			int ele = q.poll();
			System.out.print(ele+" ");
			for(int x : adj.get(ele)) {
				if(visited[x]!=true) {
					q.add(x);
					visited[x]=true;
				}
			}
		}
		
	}
	private static void printGraph(ArrayList<ArrayList<Integer>> adj) {
		for(int i=0;i<adj.size();i++) {
			ArrayList<Integer> li = adj.get(i);
			System.out.print(i+" ---> ");
			for(int x: li) {
				System.out.print(x+" ");
			}
			System.out.println();
		}
	}
}
