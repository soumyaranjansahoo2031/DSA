// https://www.geeksforgeeks.org/problems/rat-in-a-maze-problem/1
// # Medium
// #Graph #DFS 
//===========================================================================
class Solution{
  
    int x_dir[] = {1,0,-1,0};
    int y_dir[] = {0,-1,0,1};
    String dir[] ={"D","L","U","R"};
    
    public ArrayList<String> findPath(int[][] mat) {
        
        int n = mat.length;
        boolean[][] check = new boolean[n][n];
        check[0][0]=true;
        
        ArrayList<String> li = new ArrayList<>();
        if(mat[0][0]==0 || mat[n-1][n-1]==0) return li;
        
        String str = "";
        
        dfs(n,mat,check,0,0,li,str);
        
        return li;
        
    }
    
    public void dfs(int n,int[][] mat,boolean[][] check,int x,int y,ArrayList<String> li,String str){
        if(x == n-1 && y == n-1){
            li.add(str);
            return ;
        }   
        for(int i=0;i<4;i++){
            int x_n = x+x_dir[i];
            int y_n = y+y_dir[i];
            
            if(x_n >= 0 && x_n < n && y_n >= 0 && y_n < n 
            && !check[x_n][y_n] && mat[x_n][y_n]==1){
                // System.out.println(dir[i]+" "+x_n+" "+y_n+" "+mat[x_n][y_n]);
                str = str + dir[i];
                check[x_n][y_n]=true;
                dfs(n,mat,check,x_n,y_n,li,str);
                check[x_n][y_n]=false;                      // backtracking
                str = str.substring(0, str.length() - 1);   // backtracking
            }
        }
    }
}
//===========================================================================

// Examples:

// Input: mat[][] = [[1, 0, 0, 0],
//                 [1, 1, 0, 1], 
//                 [1, 1, 0, 0],
//                 [0, 1, 1, 1]]
// Output: DDRDRR DRDDRR
// Explanation: The rat can reach the destination at (3, 3) from (0, 0) by two paths - DRDDRR and DDRDRR, when printed in sorted order we get DDRDRR DRDDRR.
// Input: mat[][] = [[1, 0],
//                 [1, 0]]
// Output: -1
// Explanation: No path exists and destination cell is blocked.
// Expected Time Complexity: O(3n^2)
// Expected Auxiliary Space: O(l * x)
// Here l = length of the path, x = number of paths.

// Constraints:
// 2 ≤ n ≤ 5
// 0 ≤ mat[i][j] ≤ 1
