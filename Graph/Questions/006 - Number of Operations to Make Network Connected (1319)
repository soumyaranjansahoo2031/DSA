// https://leetcode.com/problems/number-of-operations-to-make-network-connected/description/
// # Medium
// # Graph  # DFS  # BFS  

// no. of separate groups

class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length < n-1) return -1;
        List<List<Integer>> lili = new ArrayList<>();
        for(int i=0;i<n;i++){
            lili.add(new ArrayList<>());
        }
        for(int[] edge : connections){
            addEdge(lili,edge[0],edge[1]);
        }
        boolean visited[] = new boolean[n]; 
        int count = -1;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                count++;
                dfs(i,visited,lili);
            }
        }
        return count;
    }
    private void addEdge(List<List<Integer>> lili,int a,int b){
        lili.get(a).add(b);
        lili.get(b).add(a);
    }
    private void dfs(int s,boolean[] visited,List<List<Integer>> lili){
        visited[s]=true;
        for(int x : lili.get(s)){
            if(!visited[x]) dfs(x,visited,lili);
        }
    }
}

